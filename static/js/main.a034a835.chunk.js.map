{"version":3,"sources":["state/StateTypes.js","state/Actions.js","conversation/msgs.js","conversation/ConversationUtils.js","conversation/Respond.js","conversation/Conversation.js","containers/WidgetContainer.js","state/State.js","containers/RightColumnContainer.js","components/VisualizerOptionSelectionGrid.js","containers/SummaryContainer.js","nn-architecture/hyperparams.js","nn-architecture/Layer.js","nn-architecture/Network.js","state/NNState.js","components/VisualizerNNContainer.js","components/PlotKNN.js","containers/PlotsContainer.js","containers/VisualizerContainer.js","codegen/networkCode.js","codegen/codeGen.js","codegen/sharedCode.js","codegen/importsCode.js","codegen/preprocessCode.js","codegen/knnCode.js","codegen/regressionCode.js","containers/CodeContainer.js","containers/MainColumnContainer.js","containers/ContentContainer.js","containers/HeaderContainer.js","containers/AppContainer.js","serviceWorker.js","index.js","logo.svg"],"names":["Tasks","Object","freeze","CLASSIFICATION","REGRESSION","NATURAL_LANGUAGE","Models","LINEAR_REGRESSION","POISSON_REGRESSION","ORDINAL_REGRESSION","KNN","NEURAL_NETWORK_FF","SENTIMENT_ANALYSIS","ENTITY_RECOGNITION","DatasetCategory","CUSTOM","SAMPLE","Preprocessors","IRIS","BOSTON","PCA","NORMALIZATION","StepperState","TASK","DATASET","MODEL","PREPROCESSORS","VISUALIZE","StepperStateOrder","InitialState","task","task_otto","model","model_otto","dataset_category","dataset_category_otto","sample_dataset","sample_dataset_otto","preprocessors","preprocessors_otto","stepper_state","stepper_finish","Actions","SET_TASK","SET_MODEL","SET_DATASET_CATEGORY","SET_SAMPLE_DATASET","SET_TASK_OTTO","SET_MODEL_OTTO","SET_DATASET_CATEGORY_OTTO","SET_SAMPLE_DATASET_OTTO","TOGGLE_PREPROCESSOR","TOGGLE_PREPROCESSOR_OTTO","STEPPER_HANDLE_NEXT","STEPPER_HANDLE_PREVIOUS","HANDLE_STEPPER_FINISH","HANDLE_RESET","TaskRecommendation","intentToTask","task_reg","task_class","task_nlp","regressionModelToKeywords","classificationModelToKeywords","getWitResult","wit","utterance","a","message","extractTask","witResponse","intents","length","topIntentName","name","extractSubject","entities","subject","responseTo","userMessage","state","dispatch","taskStep","modelStep","console","log","witResult","taskForSampleDataset","modelForSampleDataset","sampleDataset","matchedKeywords","type","msgs","statement","regressionModel","entries","keywords","keyword","includes","extractRegressionModel","classificationModel","extractClassificationModel","require","Wit","token","readWriteDelay","msg","convo","say","sayMessages","messages","Array","isArray","Promise","r","setTimeout","handleUserMessage","document","getElementsByClassName","value","ottoTask","this","accessToken","task_tester","ottoModel","ottoNN","nn","addResponseMessage","initializeWidget","deleteMessages","WidgetContainer","useState","useEffect","toggleWidget","handleSubmit","launcher","subtitle","title","titleAvatar","logo","initialState","StateContext","createContext","DispatchStateContext","NumSteps","reducer","action","getActiveStep","indexOf","currentPreprocessors","preprocessor","filter","val","push","StateProvider","children","useReducer","Provider","useContext","RightColumnContainer","Row","className","StyledBadge","withStyles","theme","badge","width","position","top","left","height","borderRadius","content","Badge","useStyles","makeStyles","titleInner","fontSize","fontWeight","marginTop","marginBottom","large","spacing","avatarItem","textAlign","avatarItemSelected","boxShadow","border","avatarLabel","avatarLabelSelected","recommend","button","marginRight","marginLeft","getOptions","options","keys","map","key","label","TaskToModelsMap","VisualizerOptionSelectionGrid","classes","getIsSelected","AvatarItem","props","avatar","Avatar","alt","src","onClick","optionOnClickHandler","Typography","color","variant","Grid","container","direction","justify","alignItems","item","Tooltip","placement","overlap","anchorOrigin","vertical","horizontal","badgeContent","root","stepLabel","actionsContainer","resetContainer","padding","headerText","paddingLeft","paddingTop","paddingBottom","card","optionLabel","borderLeft","VerticalLinearStepper","steps","SelectedOptionLabel","option","index","join","Card","Stepper","activeStep","orientation","Step","StepLabel","StepContent","step","getStepContent","Paper","square","elevation","Button","Optimizers","ADAM","Losses","BINARY_CLASS","MULTI_CLASS","Activations","RELU","SIGMOID","TANH","SOFTMAX","Initializers","GLOROT","RANDOM","HE","LECUN","Layer","INPUT","DENSE","units","FeedforwardNN","layers","activation","outputActivation","initializer","optimizer","loss","lastHiddenSize","newLayer","splice","NNStateContext","DispatchNNStateContext","NNStateProvider","useNNState","nn_state","nn_dispatch","connect","prevLayerNodes","thisLayerNodes","edges","i","prevNode","source","id","j","thisNode","edge","target","size","getMaxNodeCount","network","max","nodeCount","numNodes","VisualizerNNContainer","data","g","coloredLayer","graph","nodes","x","vgap","initY","node","y","toGraph","style","transform","settings","maxNodeSize","maxEdgeSize","defaultNodeColor","clone","enableHovering","rescaleIgnoreSize","data01","z","data02","PlotKNN","margin","right","bottom","dataKey","unit","range","cursor","strokeDasharray","fill","shape","PlotsContainer","rootExplanation","rootActions","fullWidth","fullHeight","visualizerHeight","VisualizerContainer","CardContent","CardActions","display","float","startIcon","NavigateBeforeRounded","disabled","some","endIcon","NavigateNextRounded","StringBuilder","layerCode","sb","layer","inputLayerCode","outputLayerCode","hiddenLayerCode","appendLine","toString","codeGen","dataset","append","params","sliceData","networkCode","components","preprocessCode","componentsForModel","CodeContainer","MainColumnContainer","ContentContainer","Col","lg","HeaderContainer","Navbar","bg","Brand","href","App","Container","fluid","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","AppContainer","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.a034a835.chunk.js","sourcesContent":["export const Tasks = Object.freeze({\n  CLASSIFICATION: \"Classification\",\n  REGRESSION: \"Regression\",\n  NATURAL_LANGUAGE: \"Natural Language\",\n});\n\nexport const Models = Object.freeze({\n  LINEAR_REGRESSION: \"Linear Regression\",\n  POISSON_REGRESSION: \"Poisson Regression\",\n  ORDINAL_REGRESSION: \"Ordinal Regression\",\n  KNN: \"K-Nearest Neighbors\",\n  NEURAL_NETWORK_FF: \"Feedforward Neural Network\",\n  SENTIMENT_ANALYSIS: \"Sentiment Analysis\",\n  ENTITY_RECOGNITION: \"Entity Recognition\",\n});\n\nexport const TaskToModelsMap = (task: TasksType) => {\n  let validModels;\n  switch (task) {\n    case Tasks.CLASSIFICATION:\n      validModels = (({ KNN, NEURAL_NETWORK_FF }) => ({\n        KNN,\n        NEURAL_NETWORK_FF,\n      }))(Models);\n      return validModels;\n    case Tasks.REGRESSION:\n      validModels = (({\n        LINEAR_REGRESSION,\n        POISSON_REGRESSION,\n        ORDINAL_REGRESSION,\n      }) => ({\n        LINEAR_REGRESSION,\n        POISSON_REGRESSION,\n        ORDINAL_REGRESSION,\n      }))(Models);\n      return validModels;\n    case Tasks.NATURAL_LANGUAGE:\n      validModels = (({ SENTIMENT_ANALYSIS, ENTITY_RECOGNITION }) => ({\n        SENTIMENT_ANALYSIS,\n        ENTITY_RECOGNITION,\n      }))(Models);\n      return validModels;\n    default:\n      return [];\n  }\n};\n\nexport const DatasetCategory = Object.freeze({\n  CUSTOM: \"Custom\",\n  SAMPLE: \"Sample\",\n});\n\nexport const SampleDataset = Object.freeze({\n  IRIS: \"iris\",\n  BOSTON: \"boston\",\n});\n\nexport const Preprocessors = Object.freeze({\n  PCA: \"PCA\",\n  NORMALIZATION: \"Normalization\",\n});\n\nexport const StepperState = Object.freeze({\n  TASK: \"task\",\n  DATASET: \"dataset\",\n  MODEL: \"model\",\n  PREPROCESSORS: \"preprocessors\",\n  VISUALIZE: \"visualize\",\n});\n\nexport const StepperStateOrder = [\n  StepperState.TASK,\n  StepperState.DATASET,\n  StepperState.MODEL,\n  StepperState.PREPROCESSORS,\n  StepperState.VISUALIZE,\n];\n\nexport type TasksType = \"Classification\" | \"Regression\" | \"Natural Language\";\n\nexport type ModelsType =\n  | \"Linear Regression\"\n  | \"Poisson Regression\"\n  | \"Ordinal Regression\"\n  | \"K-Nearest Neighbors\"\n  | \"Feedforward Neural Network\"\n  | \"Sentiment Analysis\"\n  | \"Entity Recognition\";\n\nexport type DatasetCategoryType = \"Custom\" | \"Sample\";\n\nexport type SampleDatasetType = \"iris\";\n\nexport type PreprocessorsType = \"PCA\" | \"Normalization\";\n\nexport type StepperStateType =\n  | \"task\"\n  | \"dataset\"\n  | \"model\"\n  | \"preprocessors\"\n  | \"visualize\";\n\nexport type StateType = {\n  task: ?TasksType,\n  task_otto: ?TasksType,\n  model: ?ModelsType,\n  model_otto: ?ModelsType,\n  dataset_category: ?DatasetCategoryType,\n  dataset_category_otto: ?DatasetCategoryType,\n  sample_dataset: ?SampleDatasetType,\n  sample_dataset_otto: ?SampleDatasetType,\n  preprocessors: Array<PreprocessorsType>,\n  preprocessors_otto: Array<PreprocessorsType>,\n\n  stepper_state: StepperStateType,\n  stepper_finish: Boolean,\n};\n\nexport const InitialState: () => StateType = () => ({\n  task: null,\n  task_otto: null,\n  model: null,\n  model_otto: null,\n  dataset_category: null,\n  dataset_category_otto: null,\n  sample_dataset: null,\n  sample_dataset_otto: null,\n  preprocessors: [],\n  preprocessors_otto: [],\n\n  stepper_state: StepperState.TASK,\n  stepper_finish: false,\n});\n","import {\n  TasksType,\n  ModelsType,\n  DatasetCategoryType,\n  SampleDatasetType,\n  PreprocessorsType,\n} from \"state/StateTypes\";\n\nexport const Actions = Object.freeze({\n  SET_TASK: \"SET_TASK\",\n  SET_MODEL: \"SET_MODEL\",\n  SET_DATASET_CATEGORY: \"SET_DATASET_CATEGORY\",\n  SET_SAMPLE_DATASET: \"SET_SAMPLE_DATASET\",\n  SET_TASK_OTTO: \"SET_TASK_OTTO\",\n  SET_MODEL_OTTO: \"SET_MODEL_OTTO\",\n  SET_DATASET_CATEGORY_OTTO: \"SET_DATASET_CATEGORY_OTTO\",\n  SET_SAMPLE_DATASET_OTTO: \"SET_SAMPLE_DATASET_OTTO\",\n  TOGGLE_PREPROCESSOR: \"TOGGLE_PREPROCESSOR\",\n  TOGGLE_PREPROCESSOR_OTTO: \"TOGGLE_PREPROCESSOR_OTTO\",\n  STEPPER_HANDLE_NEXT: \"STEPPER_HANDLE_NEXT\",\n  STEPPER_HANDLE_PREVIOUS: \"STEPPER_HANDLE_PREVIOUS\",\n  HANDLE_STEPPER_FINISH: \"HANDLE_STEPPER_FINISH\",\n  HANDLE_RESET: \"HANDLE_RESET\",\n});\n\nexport type ActionType =\n  | { type: \"SET_TASK\", task: TasksType }\n  | { type: \"SET_MODEL\", model: ModelsType }\n  | { type: \"SET_DATASET_CATEGORY\", dataset_category: DatasetCategoryType }\n  | { type: \"SET_SAMPLE_DATASET\", sample_dataset: SampleDatasetType }\n  | { type: \"SET_TASK_OTTO\", task: TasksType }\n  | { type: \"SET_MODEL_OTTO\", model: ModelsType }\n  | {\n      type: \"SET_DATASET_CATEGORY_OTTO\",\n      dataset_category: DatasetCategoryType,\n    }\n  | { type: \"SET_SAMPLE_DATASET_OTTO\", sample_dataset: SampleDatasetType }\n  | { type: \"TOGGLE_PREPROCESSOR\", preprocessor: PreprocessorsType }\n  | { type: \"TOGGLE_PREPROCESSOR_OTTO\", preprocessor: PreprocessorsType }\n  | { type: \"STEPPER_HANDLE_NEXT\" }\n  | { type: \"STEPPER_HANDLE_PREVIOUS\" }\n  | { type: \"HANDLE_STEPPER_FINISH\" }\n  | { type: \"HANDLE_RESET\" };\n","export const IntroQuestion = () => {\n    return [\n        \"Hey there!\",\n        \"What would you like to do today?\"\n    ];\n}\n\n// export const SampleData = (topic) => {\n//     return `We have some sample data for ${topic} if you'd like to use that`;\n// }\n\nexport const TaskRecommendation = (task) => {\n    return [\n        `Sounds cool!`,\n        `I'd recommend a ${task} model to help you explore that idea`\n    ];\n}\n\n// export const TaskAndSample = (task) => {\n//     return [\n//         `I think a ${task} model would help you explore that idea`,\n//         \"Check out a few sample datasets if you'd like, or leave it blank to use your own\"\n//     ]\n// }\n\nexport const TaskInfo = () => {\n    return [\n        \"Here are some pointers to help you figure out what type of machine learning task to select\",\n        \"Regression is used to model numerical variables, such as stock prices or infection rates, while classification predicts categorical outcomes, like whether an image is a cat or a dog or if a candidate will win or not\", \n        \"Natural language processing can do things like identify structures in text and figure out the tone behind an expression\",\n        \"Whenever you’re ready, pick the task that seems like the best fit\"\n    ];\n}\n\n// TODO: use \nexport const ModelPreface = () => {\n    return [\n        \"Now that we have our machine learning task and dataset figured out, the next step is to select an appropriate model\",\n    ];\n}\n\n// TODO: use\nexport const NLPModelInfo = () => {\n    return [\n        \"Entity recognition is useful for extracting key information from text (like phone numbers, album names, and times)\",\n        \"While sentiment analysis classifies expressions by their polarity (positive, negative, or neutral)\",\n    ]\n}\n\n// TODO: use\nexport const RegressionModelQuestion = () => {\n    return [\n        \"Could you describe the dependent variable in more detail?\"\n    ]\n}\n// TODO: use\nexport const ClassificationModelQuestion = () => {\n    return [\n        \"Could you describe the dataset in more detail?\"\n    ]\n}\n\nexport const ModelRecommendation = (model) => {\n    return [\n        `In that case, I think a ${model} model would be perfect`\n    ]\n}\n\n// TODO: use\nexport const PreprocessorRecommendation = (preprocessors) => {\n    return [\n        \"Based on what you've told me, I've gone ahead and setup some data preprocessors to help optimize the learning process.\"\n    ]\n}\n\n// TODO: use\nexport const NeuralNetworkPreface = () => {\n    return [\n        \"Finally, we're ready to build and configure our neural network!\",\n        \"I've made a basic feedforward network with 5 hidden layers and standard activations/initializers\",\n        \"You can play with the model and customize it, or tell me what changes to make\"\n    ]\n}\n\n","import { Tasks, Models } from \"state/StateTypes\"\n\n// TODO: refactor elsewhere?\n\nconst intentToTask = {\n    task_reg: Tasks.REGRESSION,\n    task_class: Tasks.CLASSIFICATION,\n    task_nlp: Tasks.NATURAL_LANGUAGE,\n}\n\nconst regressionModelToKeywords = {\n    [Models.POISSON_REGRESSION]: [\"count\", \"number\", \"event\", \"occurrence\"],\n    [Models.ORDINAL_REGRESSION]: [\"rank\", \"order\"],\n}; \n\nconst classificationModelToKeywords = {\n    [Models.KNN]: [\"few\", \"small\", \"simple\", \"tiny\"]\n} \n\n\n\nexport const getWitResult = async (wit, utterance) => {\n    return await wit.message(utterance);\n}\n\nexport const extractSampleDataset = (statement) => {\n    let sampleDataset = null;\n    let matchedKeywords = null;\n    let matchedTask = null;\n    let matchedModel = null;\n    return [matchedTask, matchedModel, sampleDataset, matchedKeywords];\n} \n\nexport const extractTask = (witResponse) => { // TODO: threshold\n    let intents = witResponse.intents;\n    let task = null;\n    if (intents.length > 0) {\n        let topIntent = intents[0];\n        let topIntentName = topIntent.name;\n        task = intentToTask[topIntentName];\n    }\n    return task;\n}\n\nexport const extractSubject = (witResponse) => {\n    let entities = witResponse.entities;\n    let subject = null;\n    if (\"subject:subject\" in entities) {\n      let subjectArray = entities[\"subject:subject\"];\n      let subjectObject = subjectArray[0];\n      subject = subjectObject[\"body\"];\n    }\n    return subject;\n}\n\nexport const extractRegressionModel = (statement, wit) => {\n    let regressionModel = null;\n    const kvp = Object.entries(regressionModelToKeywords);\n    for (const [model, keywords] of kvp) {\n        for (const keyword of keywords) {\n            if (statement.includes(keyword)) {\n                regressionModel = model;\n            }\n        }\n    }\n    return regressionModel;\n}\n\nexport const extractClassificationModel = (statement, wit) => {\n    let classificationModel = null;\n    const kvp = Object.entries(classificationModelToKeywords);\n    for (const [model, keywords] of kvp) {\n        for (const keyword of keywords) {\n            if (statement.includes(keyword)) {\n                classificationModel = model;\n            }\n        }\n    }\n    return classificationModel;\n}\n\nexport const extractArchitectureChange = (witResponse) => {\n    // let architectureChange = {};\n    // const intent = witResponse.intent;\n    // architectureChange.intent = intent;\n}\n\n// const getOrDefault = (obj, key, defaultValue) => {\n\n// }","import { Actions } from \"state/Actions\";\nimport { StepperState, DatasetCategory, SampleDataset, Tasks, Models } from \"state/StateTypes\";\nimport * as msgs from \"conversation/msgs\";\nimport { \n    getWitResult, \n    extractTask, \n    extractSubject, \n    extractSampleDataset, \n    extractRegressionModel, \n    extractClassificationModel \n} from \"conversation/ConversationUtils\";\n\nconst responseTo = async (userMessage, wit, state, dispatch) => {\n    \n    switch (state.stepper_state) {\n        case StepperState.TASK:\n            return await taskStep(userMessage, wit, state, dispatch);\n        // case StepperState.DATASET:\n        //     return dataStep(userMessage, wit, state, dispatch);\n        case StepperState.MODEL:\n            return modelStep(userMessage, wit, state, dispatch);\n    }\n\n}\n\nconst taskStep = async (userMessage, wit, state, dispatch) => {\n    console.log(\"taskStep\");\n\n    // get the wit result\n    const witResult = await getWitResult(wit, userMessage);\n    console.log(witResult);\n\n    // extract the subject or null\n    const subject = extractSubject(witResult);\n    console.log(subject);\n\n    // extract the sample dataset or null\n    const effectiveSubject = subject ? subject : userMessage;\n    const [taskForSampleDataset, modelForSampleDataset, sampleDataset, matchedKeywords] = extractSampleDataset(\n        effectiveSubject\n    );\n    console.log(taskForSampleDataset);\n    console.log(sampleDataset);\n    console.log(matchedKeywords);\n\n    // define the task or null\n    const task = taskForSampleDataset ? taskForSampleDataset : extractTask(witResult);\n    console.log(task);\n    if (sampleDataset) {\n        // update dataset type\n        dispatch({\n            type: Actions.SET_DATASET_CATEGORY,\n            dataset_category: DatasetCategory.SAMPLE,\n        });\n        dispatch({\n            type: Actions.SET_DATASET_CATEGORY_OTTO,\n            dataset_category: DatasetCategory.SAMPLE,\n        });\n        // update sample dataset\n        dispatch({\n            type: Actions.SET_SAMPLE_DATASET,\n            sample_dataset: sampleDataset,\n        });\n        dispatch({\n            type: Actions.SET_SAMPLE_DATASET_OTTO,\n            sample_dataset: sampleDataset,\n        });\n        // update model\n        dispatch({\n            type: Actions.SET_MODEL,\n            model: modelForSampleDataset,\n        });\n        dispatch({\n            type: Actions.SET_MODEL_OTTO,\n            model: modelForSampleDataset,\n        });\n    }\n\n    if (task) {\n        // update task state\n        dispatch({\n            type: Actions.SET_TASK,\n            task: task,\n        });\n        dispatch({\n            type: Actions.SET_TASK_OTTO,\n            task: task,\n        });\n\n        return msgs.TaskRecommendation(task);\n    }\n\n    return msgs.TaskInfo();\n\n}\n\nconst modelStep = (userMessage, wit, state, dispatch) => {\n    console.log(\"modelStep\");\n\n    const task = state.task;\n    let model = state.model;\n\n    console.log(\"Task: \\n\", task);\n    console.log(\"Model: \\n\", model);\n\n    // model not predefined (custom dataset)\n    if (!model) {\n        switch (task) {\n            case Tasks.REGRESSION:\n                model = extractRegressionModel(userMessage, wit) || \n                    Models.LINEAR_REGRESSION;\n                break;\n            case Tasks.CLASSIFICATION:\n                model = extractClassificationModel(userMessage, wit) ||\n                    Models.NEURAL_NETWORK_FF;\n                break;\n        }\n\n        dispatch({\n            type: Actions.SET_MODEL,\n            model: model,\n        });\n        dispatch({\n            type: Actions.SET_MODEL_OTTO,\n            model: model,\n        });\n\n    }\n\n    return msgs.ModelRecommendation(model);\n\n}\n\nconst architectureStep = async (userMessage, wit, state, dispatch) => {\n\n    const witResult = await getWitResult(wit, userMessage); \n    // convert witresult to architecture change\n    // relay change to architecture\n\n}\n\nexport default responseTo;","import responseTo from \"conversation/Respond\";\nconst { Wit, log } = require(\"node-wit\");\nconst token = require(\"TOKEN.json\");\n\nexport default class Conversation /* extends React.Component */  {\n\n    constructor(say) {\n        // super();\n        this.say = say;\n        this.ottoTask = new Wit({\n            accessToken: token.task_tester,\n        });\n        this.ottoModel = new Wit({\n            accessToken: token.model,\n        });\n        this.ottoNN = new Wit({\n            accessToken: token.nn,\n        });\n    }\n\n    sayMessages = async (messages) => {\n        if (!Array.isArray(messages)) {\n            messages = [messages];\n        }\n        for (let message of messages) {\n            if (message != null) {\n                await new Promise((r) => setTimeout(r, readWriteDelay(message)));\n                this.say(message);\n            }\n        }\n    };\n    \n    handleUserMessage = async (userMessage, state, dispatch) => {\n        document.getElementsByClassName(\"rcw-sender\")[0].message.value = \"\";\n        console.log(`New message incoming! ${userMessage}`);\n        console.log(state);\n\n        // const [state, dispatch] = null;\n        await this.sayMessages(\n            await responseTo(userMessage, this.ottoTask, state, dispatch)\n        ); \n    };\n\n    render() {\n        return null;\n    }\n\n}\n\nfunction readWriteDelay(msg) {\n    const WPM = 300;\n    const length = msg.length;\n    const timeRead = (length / 3.5 / WPM) * 60 * 1000;\n    return timeRead;\n}","import React from \"react\";\nimport { useEffect } from \"react\";\nimport { useState } from \"state/State\";\n\nimport {\n  Widget,\n  toggleWidget,\n  addResponseMessage,\n  deleteMessages,\n} from \"react-chat-widget\";\nimport logo from \"logo.svg\";\n\nimport * as msgs from \"conversation/msgs\";\nimport Conversation from \"conversation/Conversation\";\n\nconst convo = new Conversation(addResponseMessage);\n\nexport function initializeWidget() {\n  deleteMessages();\n  convo.sayMessages(msgs.IntroQuestion());\n}\n\nfunction WidgetContainer() {\n  const { state, dispatch } = useState();\n\n  useEffect(() => {\n    toggleWidget();\n    initializeWidget();\n  }, []);\n\n  const handleSubmit = (userMessage) => {\n    convo.handleUserMessage(userMessage, state, dispatch);\n  };\n\n  // async function performResponse(userMessage) {\n  //   const responses = await convo.respondTo(userMessage);\n  //   await new Promise((r) => setTimeout(r, readWriteDelay(userMessage)));\n  //   for (const i in responses) {\n  //     const response = responses[i];\n  //     await new Promise((r) => setTimeout(r, readWriteDelay(response)));\n  //     addResponseMessage(response);\n  //   }\n  // }\n\n  return (\n    <Widget\n      handleSubmit={handleSubmit}\n      launcher={() => null}\n      subtitle=\"\"\n      title=\"Otto\"\n      titleAvatar={logo}\n    />\n  );\n}\n\nexport default WidgetContainer;\n","import React from \"react\";\nimport { useReducer, createContext, useContext } from \"react\";\n\nimport { deleteMessages, addResponseMessage } from \"react-chat-widget\";\nimport { InitialState, StateType } from \"state/StateTypes\";\nimport { ActionType, Actions } from \"state/Actions\";\nimport { StepperStateOrder } from \"state/StateTypes\";\n\nimport { initializeWidget } from \"containers/WidgetContainer\";\n\n// See https://www.basefactor.com/global-state-with-react for details\nconst initialState = InitialState();\n\nexport const StateContext = createContext(initialState);\nexport const DispatchStateContext = createContext(() => null);\nconst NumSteps = StepperStateOrder.length;\n\nfunction reducer(state: StateType, action: ActionType): StateType {\n  const getActiveStep = () => {\n    return StepperStateOrder.indexOf(state.stepper_state);\n  };\n\n  switch (action.type) {\n    case Actions.SET_TASK:\n      return { ...state, task: action.task };\n    case Actions.SET_DATASET_CATEGORY:\n      return { ...state, dataset_category: action.dataset_category };\n    case Actions.SET_MODEL:\n      return { ...state, model: action.model };\n    case Actions.SET_SAMPLE_DATASET:\n      return { ...state, sample_dataset: action.sample_dataset };\n    case Actions.SET_TASK_OTTO:\n      return { ...state, task_otto: action.task };\n    case Actions.SET_DATASET_CATEGORY_OTTO:\n      return { ...state, dataset_category_otto: action.dataset_category };\n    case Actions.SET_MODEL_OTTO:\n      return { ...state, model_otto: action.model };\n    case Actions.SET_SAMPLE_DATASET_OTTO:\n      return { ...state, sample_dataset_otto: action.sample_dataset };\n    case Actions.TOGGLE_PREPROCESSOR: {\n      let currentPreprocessors = state.preprocessors;\n      if (currentPreprocessors.includes(action.preprocessor)) {\n        currentPreprocessors = currentPreprocessors.filter(\n          (val) => val !== action.preprocessor\n        );\n      } else {\n        currentPreprocessors.push(action.preprocessor);\n      }\n      return {\n        ...state,\n        preprocessors: currentPreprocessors,\n      };\n    }\n    case Actions.TOGGLE_PREPROCESSOR_OTTO: {\n      let currentPreprocessors = state.preprocessors_otto;\n      if (currentPreprocessors.includes(action.preprocessor)) {\n        currentPreprocessors = currentPreprocessors.filter(\n          (val) => val !== action.preprocessor\n        );\n      } else {\n        currentPreprocessors = currentPreprocessors.push(action.preprocessor);\n      }\n      return {\n        ...state,\n        preprocessors_otto: currentPreprocessors,\n      };\n    }\n    case Actions.STEPPER_HANDLE_NEXT:\n      return {\n        ...state,\n        stepper_state:\n          NumSteps === getActiveStep()\n            ? NumSteps\n            : StepperStateOrder[getActiveStep() + 1],\n      };\n    case Actions.STEPPER_HANDLE_PREVIOUS:\n      return {\n        ...state,\n        stepper_state:\n          StepperStateOrder[StepperStateOrder.indexOf(state.stepper_state) - 1],\n        stepper_finish: false,\n      };\n    case Actions.HANDLE_STEPPER_FINISH:\n      return {\n        ...state,\n        stepper_finish: true,\n      };\n    case Actions.HANDLE_RESET:\n      initializeWidget();\n      return InitialState();\n    default:\n      return state;\n  }\n}\n\nexport const StateProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchStateContext.Provider value={dispatch}>\n        {children}\n      </DispatchStateContext.Provider>\n    </StateContext.Provider>\n  );\n};\n\nexport const useState = () => ({\n  state: useContext(StateContext),\n  dispatch: useContext(DispatchStateContext),\n});\n","import React from \"react\";\nimport \"App.css\";\nimport { Row } from \"react-bootstrap\";\n\nfunction RightColumnContainer() {\n  return (\n    <>\n      <Row className=\"outerContainer toolboxContainer\">Toolbox</Row>\n    </>\n  );\n}\n\nexport default RightColumnContainer;\n","import React from \"react\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport { Grid, Avatar, Badge, Tooltip, Typography } from \"@material-ui/core\";\n\nimport { invoke } from \"js-ml/knn\";\n\nimport {\n  StepperStateType,\n  StepperState,\n  Tasks,\n  Models,\n  DatasetCategory,\n  TaskToModelsMap,\n  StateType,\n  Preprocessors,\n} from \"state/StateTypes\";\nimport { useState } from \"state/State\";\nimport { Actions } from \"state/Actions\";\nimport logo from \"logo.svg\";\n\nconst StyledBadge = withStyles((theme) => ({\n  badge: {\n    width: 10,\n    \"&::after\": {\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      width: \"100%\",\n      height: \"100%\",\n      borderRadius: \"50%\",\n      content: '\"\"',\n    },\n  },\n}))(Badge);\n\nconst useStyles = makeStyles((theme) => ({\n  titleInner: {\n    fontSize: 42,\n    fontWeight: 300,\n    marginTop: 8,\n  },\n  subtitle: {\n    marginTop: 20,\n    marginBottom: 72,\n    fontWeight: 300,\n  },\n  large: {\n    width: theme.spacing(14),\n    height: theme.spacing(14),\n  },\n  avatarItem: {\n    textAlign: \"-webkit-center\",\n    width: 188,\n  },\n  avatarItemSelected: {\n    width: theme.spacing(14),\n    height: theme.spacing(14),\n    boxShadow:\n      \"0px 5px 5px -3px rgba(0,0,0,0.2), 0px 0px 6px 1px rgba(0,0,0,0.14), 0px 3px 14px 2px rgba(0,0,0,0.12)\",\n    border: \"solid 1px #3f51b5\",\n  },\n  avatarLabel: {\n    marginTop: 20,\n  },\n  avatarLabelSelected: {\n    marginTop: 20,\n    fontWeight: 500,\n  },\n  recommend: {\n    width: 30,\n  },\n  button: {\n    marginBottom: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    marginLeft: theme.spacing(1),\n  },\n}));\n\nexport function getOptions(state: StateType) {\n  const options = [];\n  const stepperState = state.stepper_state;\n  switch (stepperState) {\n    case StepperState.TASK:\n      Object.keys(Tasks).map((key) =>\n        options.push({\n          label: Tasks[key],\n          type: StepperState.TASK,\n        })\n      );\n      return options;\n    case StepperState.DATASET:\n      Object.keys(DatasetCategory).map((key) =>\n        options.push({\n          label: DatasetCategory[key],\n          type: StepperState.DATASET,\n        })\n      );\n      return options;\n    case StepperState.MODEL:\n      Object.keys(TaskToModelsMap(state.task)).map((key) =>\n        options.push({\n          label: Models[key],\n          type: StepperState.MODEL,\n        })\n      );\n      return options;\n    case StepperState.PREPROCESSORS:\n      Object.keys(Preprocessors).map((key) =>\n        options.push({\n          label: Preprocessors[key],\n          type: StepperState.PREPROCESSORS,\n        })\n      );\n      return options;\n    default:\n      return options;\n  }\n}\n\nexport default function VisualizerOptionSelectionGrid() {\n  const classes = useStyles();\n  const { state, dispatch } = useState();\n\n  const getIsRecommended = (value) =>\n    [\n      state.task_otto,\n      state.dataset_category_otto,\n      state.sample_dataset_otto,\n      state.model_otto,\n      ...state.preprocessors_otto,\n    ].includes(value);\n\n  const getIsSelected = (value) =>\n    [\n      state.task,\n      state.dataset_category,\n      state.sample_dataset,\n      state.model,\n      ...state.preprocessors,\n    ].includes(value);\n\n  const optionOnClickHandler = (type: StepperStateType, value) => {\n    switch (type) {\n      case StepperState.TASK:\n        dispatch({\n          type: Actions.SET_TASK,\n          task: value,\n        });\n        break;\n      case StepperState.DATASET:\n        dispatch({\n          type: Actions.SET_DATASET_CATEGORY,\n          dataset_category: value,\n        });\n        break;\n      case StepperState.MODEL:\n        dispatch({\n          type: Actions.SET_MODEL,\n          model: value,\n        });\n        break;\n      case StepperState.PREPROCESSORS:\n        dispatch({\n          type: Actions.TOGGLE_PREPROCESSOR,\n          preprocessor: value,\n        });\n        break;\n      default:\n    }\n  };\n\n  function AvatarItem(props: { avatar: any }) {\n    const avatar = props.avatar;\n    return (\n      <Avatar\n        alt={avatar.label}\n        src={logo}\n        className={\n          getIsSelected(avatar.label)\n            ? classes.avatarItemSelected\n            : classes.large\n        }\n        onClick={() => optionOnClickHandler(avatar.type, avatar.label)}\n      />\n    );\n  }\n\n  return (\n    <>\n      <Typography className={classes.titleInner} color=\"textPrimary\">\n        Let's get started!\n      </Typography>\n      <Typography variant=\"h6\" className={classes.subtitle}>\n        Chat with Otto to get a {state.stepper_state} recommendation.\n      </Typography>\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n        spacing={5}\n      >\n        {getOptions(state).map((avatar) => (\n          <Grid item className={classes.avatarItem} key={avatar.label}>\n            {getIsRecommended(avatar.label) ? (\n              <Tooltip title=\"Recommended by Otto!\" placement=\"top\">\n                <StyledBadge\n                  overlap=\"circle\"\n                  anchorOrigin={{\n                    vertical: \"top\",\n                    horizontal: \"right\",\n                  }}\n                  badgeContent={\n                    <img\n                      className={classes.recommend}\n                      src=\"https://img.icons8.com/ultraviolet/80/000000/good-quality.png\"\n                      alt=\"R\"\n                    />\n                  }\n                >\n                  <AvatarItem avatar={avatar} />\n                </StyledBadge>\n              </Tooltip>\n            ) : (\n              <AvatarItem avatar={avatar} />\n            )}\n            <Typography\n              color=\"textPrimary\"\n              className={\n                getIsSelected(avatar.label)\n                  ? classes.avatarLabelSelected\n                  : classes.avatarLabel\n              }\n            >\n              {avatar.label}\n            </Typography>\n          </Grid>\n        ))}\n      </Grid>\n    </>\n  );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport StepContent from \"@material-ui/core/StepContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Card } from \"@material-ui/core\";\nimport { useState } from \"state/State\";\nimport { StepperStateOrder, StateType } from \"state/StateTypes\";\nimport { Actions } from \"state/Actions\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"80%\",\n    marginLeft: 110,\n  },\n  stepLabel: {\n    fontSize: 19,\n  },\n  button: {\n    marginTop: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n  actionsContainer: {\n    marginBottom: theme.spacing(2),\n  },\n  resetContainer: {\n    padding: theme.spacing(3),\n  },\n  headerText: {\n    paddingLeft: theme.spacing(0),\n    paddingTop: theme.spacing(7),\n    paddingBottom: theme.spacing(1),\n    fontWeight: \"600\",\n  },\n  card: {\n    marginTop: \"4px\",\n  },\n  optionLabel: {\n    marginLeft: 12,\n    borderLeft: \"1px solid #bdbdbd\",\n    paddingLeft: 12,\n    height: 32,\n    paddingTop: 4,\n  },\n}));\n\nexport function getSteps() {\n  return [\"Task\", \"Dataset\", \"Model\", \"Preprocessors\", \"Visualize\"];\n}\n\nfunction getStepContent(step) {\n  switch (step) {\n    case 0:\n      return \"Identify the machine learning task that describes your goal\";\n    case 1:\n      return \"Choose from provided datasets, or use your own\";\n    case 2:\n      return \"Select the model best equipped to unlock insights from your data\";\n    case 3:\n      return \"Optimize your data for machine learning\";\n    case 4:\n      return \"Fine tune and visualize your model\";\n    default:\n      return \"Unknown step\";\n  }\n}\n\nexport const getActiveStep = (state: StateType) =>\n  state.stepper_finish\n    ? StepperStateOrder.length\n    : StepperStateOrder.indexOf(state.stepper_state);\n\nexport default function VerticalLinearStepper() {\n  const classes = useStyles();\n  const { state, dispatch } = useState();\n  const steps = getSteps();\n\n  const SelectedOptionLabel = (props: { index: number }) => {\n    let option = null;\n    switch (props.index) {\n      case 0:\n        option = state.task;\n        break;\n      case 1:\n        option = state.dataset_category;\n        break;\n      case 2:\n        option = state.model;\n        break;\n      case 3:\n        option = state.preprocessors.join(\", \");\n        break;\n      default:\n        break;\n    }\n    if (option == null || getActiveStep(state) <= props.index) {\n      return null;\n    }\n    return <Typography className={classes.optionLabel}>{option}</Typography>;\n  };\n\n  const handleReset = () => {\n    dispatch({\n      type: Actions.HANDLE_RESET,\n    });\n  };\n\n  return (\n    <div className={classes.root}>\n      <Typography className={classes.headerText} variant=\"h5\">\n        Pipeline Architecture\n      </Typography>\n      <Card className={classes.card} variant=\"outlined\">\n        <Stepper activeStep={getActiveStep(state)} orientation=\"vertical\">\n          {steps.map((label, index) => (\n            <Step key={label}>\n              <StepLabel>\n                {<Typography variant=\"h6\">{label}</Typography>}\n              </StepLabel>\n              <StepContent>\n                <Typography>{getStepContent(index)}</Typography>\n              </StepContent>\n              <SelectedOptionLabel index={index} />\n            </Step>\n          ))}\n        </Stepper>\n      </Card>\n      {getActiveStep(state) === steps.length && (\n        <Paper square elevation={0} className={classes.resetContainer}>\n          <Typography>All steps completed - you&apos;re finished</Typography>\n          <Button onClick={handleReset} className={classes.button}>\n            Reset\n          </Button>\n        </Paper>\n      )}\n    </div>\n  );\n}\n","export const Optimizers = Object.freeze({\n    ADAM: \"adam\",\n});\n\nexport const Losses = Object.freeze({\n    BINARY_CLASS: \"binary_crossentropy\",\n    MULTI_CLASS: \"categorical_crossentropy\",\n});\n\nexport const Activations = Object.freeze({\n    RELU: \"relu\",\n    SIGMOID: \"sigmoid\",\n    TANH: \"tanh\",\n    SOFTMAX: \"softmax\",\n});\n\nexport const Initializers = Object.freeze({\n    GLOROT: \"glorot_uniform\",\n    RANDOM: \"random_uniform\",\n    HE: \"he_uniform\",\n    LECUN: \"lecun_uniform\",\n});\n\nexport const Layers = Object.freeze({\n    INPUT: \"Input\",\n    DENSE: \"Dense\"\n});","export class Layer {\n\n    constructor(units) {\n        this.units = units;\n    }\n\n}","import {\n  Optimizers,\n  Losses,\n  Activations,\n  Initializers,\n} from \"nn-architecture/hyperparams\";\nimport { Layer } from \"nn-architecture/Layer\";\n\nexport class FeedforwardNN {\n  constructor(state) {\n    this.layers = state.layers;\n    this.activation = state.activation;\n    this.outputActivation = state.outputActivation;\n    this.initializer = state.initializer;\n    this.optimizer = state.optimizer;\n    this.loss = state.loss;\n  }\n\n  pushLayer() {\n    const layers = this.layers;\n    const lastHiddenLayer = layers[layers.length - 2];\n    const lastHiddenSize = lastHiddenLayer.units;\n    const newLayer = new Layer(lastHiddenSize);\n    layers.splice(layers.length - 1, 0, newLayer);\n  }\n\n  popLayer() {\n    const layers = this.layers;\n    layers.splice(layers.length - 2, 1);\n  }\n}\n\n//  setBatchSize(newBatch) {\n//      this.batchSize = newBatch;\n//  }\n//  setLearnRate(newLearn) {\n//      this.learnRate = newLearn;\n//  }\n\n//  setOptimizer(newOptimizer){\n//     this.optimizer = newOptimizer;\n// }\n\n//  setLoss(newLoss) {\n//      this.loss = newLoss;\n//  }\n\n//  setEpochs(newEpochs) {\n//      this.epochs = newEpochs;\n//  }\n\n//  setlearningRateDecay(newDecay) {\n//      this.learningRateDecay = newDecay;\n//  }\n\n// // setInit(newInit) {\n// //     this.initializer = newInit;\n// // }\n\n// addLayer(newLayer) {\n//     this.arrLayers.push(newLayer);\n// }\n\n// removeLayer(index) {\n//     this.arrLayers.splice(index, 1);\n// }\n","import React from \"react\";\nimport { useReducer, createContext, useContext } from \"react\";\n\nimport {\n  Optimizers,\n  Losses,\n  Activations,\n  Initializers,\n} from \"nn-architecture/hyperparams\";\nimport { Layer } from \"nn-architecture/Layer\";\nimport { ActionType, Actions } from \"state/Actions\";\n\nconst InitialState = () => ({\n  layers: [\n    new Layer(3),\n    new Layer(5),\n    new Layer(5),\n    new Layer(5),\n    new Layer(5),\n    new Layer(2),\n  ],\n  activation: Activations.RELU,\n  outputActivation: Activations.SOFTMAX,\n  initializer: Initializers.GLOROT,\n  optimizer: Optimizers.ADAM,\n  loss: Losses.BINARY_CLASS,\n});\n\nconst initialState = InitialState();\nconst NNStateContext = createContext(initialState);\nconst DispatchNNStateContext = createContext(() => null);\n\nfunction reducer(state, action: ActionType) {\n  switch (action.type) {\n    default:\n      return state;\n  }\n}\n\nexport const NNStateProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <NNStateContext.Provider value={state}>\n      <DispatchNNStateContext.Provider value={dispatch}>\n        {children}\n      </DispatchNNStateContext.Provider>\n    </NNStateContext.Provider>\n  );\n};\n\nexport const useNNState = () => ({\n  nn_state: useContext(NNStateContext),\n  nn_dispatch: useContext(DispatchNNStateContext),\n});\n","import React from \"react\";\nimport { Sigma, RandomizeNodePositions, RelativeSize } from \"react-sigma\";\nimport { FeedforwardNN } from \"nn-architecture/Network\";\nimport { useNNState } from \"state/NNState\";\n\nexport const getSigma = (data) => (\n  <Sigma\n    graph={data}\n    style={{\n      height: \"95%\",\n      transform: \"translate(-50%, -10px)\",\n    }}\n    // onClickNode={onClickNodeFunc}\n    //onOverNode={this.onOverNodeFunc}\n    //onOutNode={this.onOutNodeFunc}\n    settings={{\n      maxNodeSize: 10,\n      maxEdgeSize: 0.3,\n      defaultNodeColor: \"#ec5148\",\n      clone: false,\n      enableHovering: true,\n      rescaleIgnoreSize: true, // TODO change?\n    }}\n  />\n);\n\nexport const toGraph = (network, coloredLayer) => {\n  const layers = network.layers;\n\n  let maxNodeCount = getMaxNodeCount(network);\n\n  let graph = {};\n  let nodes = [];\n  let edges = [];\n  let prevLayerNodes = []; // cache\n\n  for (let i = 0; i < layers.length; i++) {\n    let layer = layers[i];\n    let nodeCount = layer.units;\n\n    let x = i * 0.2;\n    let color = i === coloredLayer ? \"#add8e6\" : \"#fff\";\n\n    let vgap = 0.15 - nodeCount / 200;\n    let renderHeight = (nodeCount - 1) * vgap;\n    let initY = (2.0 - renderHeight) / 2;\n\n    let thisLayerNodes = [];\n\n    for (let j = 0; j < nodeCount; j++) {\n      let y = initY + j * vgap;\n      let id = i + \",\" + j;\n      let size = 1;\n\n      let node = { x: x, y: y, size: size, id: id /*color: color*/ };\n      nodes.push(node);\n      thisLayerNodes.push(node);\n    }\n\n    if (prevLayerNodes.length > 0) {\n      // TODO check this??\n      connect(prevLayerNodes, thisLayerNodes, edges);\n    }\n\n    prevLayerNodes = thisLayerNodes;\n  }\n\n  graph.nodes = nodes;\n  graph.edges = edges;\n  return graph;\n};\n\nconst connect = (prevLayerNodes, thisLayerNodes, edges) => {\n  for (let i = 0; i < prevLayerNodes.length; i++) {\n    let prevNode = prevLayerNodes[i];\n    let source = prevNode.id;\n\n    for (let j = 0; j < thisLayerNodes.length; j++) {\n      let thisNode = thisLayerNodes[j];\n\n      let id = \"e_\" + prevNode.id + \",\" + thisNode.id;\n      let target = thisNode.id;\n      let size = 1 - (prevLayerNodes.length * thisLayerNodes.length) / 100;\n\n      let edge = { id: id, source: source, target: target, size: size };\n      edges.push(edge);\n    }\n  }\n};\n\nconst getMaxNodeCount = (network) => {\n  const layers = network.layers;\n  let max = 0;\n  for (let layer of layers) {\n    let nodeCount = layer.numNodes;\n    if (nodeCount > max) max = nodeCount;\n  }\n  return max;\n};\n\nexport default function VisualizerNNContainer() {\n  const { nn_state, nn_dispatch } = useNNState();\n  let nn = new FeedforwardNN(nn_state);\n  // nn.loss = Losses.MULTI_CLASS;\n  // console.log(networkCode(nn));\n\n  // nn.pushLayer();\n  // nn.pushLayer();\n  // console.log(networkCode(nn));\n\n  // nn.popLayer();\n  // console.log(networkCode(nn));\n\n  let g = toGraph(nn);\n\n  return getSigma(g);\n}\n","import React from \"react\";\nimport {\n  ScatterChart,\n  Scatter,\n  XAxis,\n  YAxis,\n  ZAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from \"recharts\";\n\nconst data01 = [\n  { x: 100, y: 200, z: 200 },\n  { x: 120, y: 100, z: 260 },\n  { x: 170, y: 300, z: 400 },\n  { x: 140, y: 250, z: 280 },\n  { x: 150, y: 400, z: 500 },\n  { x: 110, y: 280, z: 200 },\n];\nconst data02 = [\n  { x: 200, y: 260, z: 240 },\n  { x: 240, y: 290, z: 220 },\n  { x: 190, y: 290, z: 250 },\n  { x: 198, y: 250, z: 210 },\n  { x: 180, y: 280, z: 260 },\n  { x: 210, y: 220, z: 230 },\n];\n\nexport default function PlotKNN() {\n  return (\n    <ScatterChart\n      width={400}\n      height={400}\n      margin={{\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20,\n      }}\n    >\n      <CartesianGrid />\n      <XAxis type=\"number\" dataKey=\"x\" name=\"stature\" unit=\"cm\" />\n      <YAxis type=\"number\" dataKey=\"y\" name=\"weight\" unit=\"kg\" />\n      <ZAxis\n        type=\"number\"\n        dataKey=\"z\"\n        range={[60, 400]}\n        name=\"score\"\n        unit=\"km\"\n      />\n      <Tooltip cursor={{ strokeDasharray: \"3 3\" }} />\n      <Legend />\n      <Scatter name=\"A school\" data={data01} fill=\"#8884d8\" shape=\"star\" />\n      <Scatter name=\"B school\" data={data02} fill=\"#82ca9d\" shape=\"triangle\" />\n    </ScatterChart>\n  );\n}\n","import React from \"react\";\nimport { useState } from \"state/State\";\nimport { Models } from \"state/StateTypes\";\nimport VisualizerNNContainer from \"components/VisualizerNNContainer\";\nimport PlotKNN from \"components/PlotKNN\";\n\nexport default function PlotsContainer() {\n  const { state } = useState();\n  switch (state.model) {\n    case Models.NEURAL_NETWORK_FF:\n      return <VisualizerNNContainer />;\n    case Models.KNN:\n      return <PlotKNN />;\n    default:\n      return null;\n  }\n}\n","import React from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Grid,\n  CardContent,\n  CardActions,\n  Typography,\n  Card,\n  Button,\n} from \"@material-ui/core\";\nimport {\n  NavigateNextRounded,\n  NavigateBeforeRounded,\n} from \"@material-ui/icons/\";\n\nimport { useState } from \"state/State\";\nimport VisualizerOptionSelectionGrid from \"components/VisualizerOptionSelectionGrid\";\nimport { getOptions } from \"components/VisualizerOptionSelectionGrid\";\nimport { getActiveStep, getSteps } from \"containers/SummaryContainer\";\nimport { StepperState } from \"state/StateTypes\";\nimport { Actions } from \"state/Actions\";\nimport PlotsContainer from \"./PlotsContainer\";\n\nconst useStyles = makeStyles((theme) => ({\n  rootExplanation: {\n    width: \"100%\",\n    textAlign: \"center\",\n    paddingTop: theme.spacing(1),\n    boxShadow: \"none\",\n    height: 100,\n  },\n  rootActions: {\n    width: \"100%\",\n    height: \"100%\",\n    textAlign: \"center\",\n    paddingTop: theme.spacing(1),\n    position: \"relative\",\n  },\n  title: {\n    fontSize: \"2vw\",\n    fontWeight: 300,\n    marginTop: -5,\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  fullHeight: {\n    height: \"100%\",\n  },\n  visualizerHeight: {\n    height: \"calc(100% - 100px)\",\n  },\n}));\n\nfunction VisualizerContainer() {\n  const classes = useStyles();\n  const steps = getSteps();\n  const { state, dispatch } = useState();\n\n  const getIsSelected = (value) =>\n    [\n      state.task,\n      state.dataset_category,\n      state.sample_dataset,\n      state.model,\n      ...state.preprocessors,\n    ].includes(value);\n\n  const handleNext = () => {\n    dispatch({\n      type: Actions.STEPPER_HANDLE_NEXT,\n    });\n  };\n\n  const handleBack = () => {\n    dispatch({\n      type: Actions.STEPPER_HANDLE_PREVIOUS,\n    });\n  };\n\n  const handleFinish = () => {\n    dispatch({\n      type: Actions.HANDLE_STEPPER_FINISH,\n    });\n  };\n\n  return (\n    <Grid\n      container\n      direction=\"column\"\n      justify=\"flex-start\"\n      alignItems=\"center\"\n      className={classes.fullHeight}\n    >\n      <Grid item className={classes.fullWidth}>\n        <Card className={classes.rootExplanation}>\n          <CardContent>\n            <Typography className={classes.title} color=\"primary\">\n              Build a machine learning pipeline with Otto\n            </Typography>\n          </CardContent>\n        </Card>\n      </Grid>\n      <Grid className={`${classes.fullWidth} ${classes.visualizerHeight}`} item>\n        <Card className={classes.rootActions} variant=\"outlined\">\n          <CardContent className={classes.fullHeight}>\n            {state.stepper_state === StepperState.VISUALIZE ? (\n              <PlotsContainer />\n            ) : (\n              <VisualizerOptionSelectionGrid />\n            )}\n          </CardContent>\n          <CardActions\n            style={{\n              position: \"absolute\",\n              bottom: \"2px\",\n              display: \"inline-block\",\n              width: \"100%\",\n              left: 0,\n            }}\n          >\n            {getActiveStep(state) > 0 ? (\n              <Button\n                onClick={handleBack}\n                className={classes.button}\n                style={{ float: \"left\" }}\n                startIcon={<NavigateBeforeRounded />}\n              >\n                {steps[getActiveStep(state) - 1]}\n              </Button>\n            ) : null}\n            <Button\n              disabled={\n                state.stepper_state !== StepperState.PREPROCESSORS &&\n                !getOptions(state).some((val) => getIsSelected(val.label))\n              }\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={\n                getActiveStep(state) === steps.length - 1\n                  ? handleFinish\n                  : handleNext\n              }\n              className={classes.button}\n              style={{ float: \"right\" }}\n              endIcon={<NavigateNextRounded />}\n            >\n              {getActiveStep(state) === steps.length - 1\n                ? \"Finish\"\n                : steps[getActiveStep(state) + 1]}\n            </Button>\n          </CardActions>\n        </Card>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default VisualizerContainer;\n","import { Layers } from \"nn-architecture/hyperparams\";\nconst StringBuilder = require(\"string-builder\");\n\nexport const model = (state) => {\n  const sb = new StringBuilder();\n\n  sb.appendLine(\"model = Sequential()\");\n  sb.append(layerCode(state));\n\n  sb.appendLine(\n    `model.compile(optimizer='${state.optimizer}', loss='${state.loss}')`\n  );\n\n  sb.appendLine(\"model.fit(X_train, y_train, batch_size=32, epochs=100)\");\n\n  return sb.toString();\n};\n\nconst layerCode = (state) => {\n  const sb = new StringBuilder();\n  const layers = state.layers;\n  for (let i = 0; i < layers.length; i++) {\n    const layer = layers[i];\n\n    let layerCode;\n    if (i === 0) {\n      layerCode = inputLayerCode(layer);\n    } else if (i === layers.length - 1) {\n      layerCode = outputLayerCode(layer, state);\n    } else {\n      layerCode = hiddenLayerCode(layer, state);\n    }\n\n    sb.appendLine(layerCode);\n  }\n  return sb.toString();\n};\n\nconst inputLayerCode = (layer) => {\n  const units = layer.units;\n\n  const str = `model.add(Input(shape=(${units},)))`;\n  return str;\n};\n\nconst hiddenLayerCode = (layer, state) => {\n  const units = layer.units;\n  const activation = state.activation;\n  const initializer = state.initializer;\n\n  const str = `model.add(Dense(${units}, activation='${activation}', kernel_initializer='${initializer}'))`;\n  return str;\n};\n\nconst outputLayerCode = (layer, state) => {\n  const units = layer.units;\n  const activation = state.outputActivation;\n  const initializer = state.initializer;\n\n  const str = `model.add(Dense(${units}, activation='${activation}', kernel_initializer='${initializer}'))`;\n  return str;\n};\n","import * as importsCode from \"codegen/importsCode\";\nimport * as regressionCode from \"codegen/regressionCode\";\nimport * as knnCode from \"codegen/knnCode\";\nimport * as sharedCode from \"codegen/sharedCode\";\nimport * as preprocessCode from \"codegen/preprocessCode\";\nimport { Models, DatasetCategory, Preprocessors } from \"state/StateTypes\";\nimport * as networkCode from \"codegen/networkCode\";\nimport { FeedforwardNN } from \"nn-architecture/Network\";\nconst StringBuilder = require(\"string-builder\");\n\nexport const codeGen = (state, nn_state) => {\n  const sb = new StringBuilder();\n  sb.append(importsCode.universal());\n\n  // model-specific imports\n  switch (state.model) {\n    case Models.KNN:\n      sb.appendLine(importsCode.knn());\n      break;\n    case Models.NEURAL_NETWORK_FF:\n      sb.appendLine(importsCode.nn());\n      break;\n    case Models.LINEAR_REGRESSION:\n      sb.appendLine(importsCode.linear());\n      break;\n    case Models.ORDINAL_REGRESSION:\n      sb.appendLine(importsCode.ordinal());\n      break;\n    case Models.POISSON_REGRESSION:\n      sb.appendLine(importsCode.poisson());\n      break;\n  }\n\n  // preprocessor imports\n  if (state.preprocessors.includes(Preprocessors.NORMALIZATION)) {\n    sb.appendLine(importsCode.normalization());\n  }\n  if (state.preprocessors.includes(Preprocessors.PCA)) {\n    sb.appendLine(importsCode.pca());\n  }\n\n  // import sklearn datasets\n  switch (state.dataset_category) {\n    case DatasetCategory.SAMPLE:\n      sb.appendLine(importsCode.sklearnDatasets());\n      break;\n  }\n\n  sb.appendLine();\n\n  // defines loadData function\n  switch (state.dataset_category) {\n    case DatasetCategory.SAMPLE:\n      sb.appendLine(sharedCode.defineLoadDataset(state.sample_dataset));\n      break;\n    case DatasetCategory.CUSTOM:\n      sb.appendLine(sharedCode.defineLoadUnspecified());\n      break;\n  }\n\n  sb.appendLine();\n\n  // defines params\n  sb.appendLine(params(state));\n\n  sb.appendLine();\n\n  // loads data\n  sb.appendLine(sharedCode.load());\n\n  // scales data\n  if (state.preprocessors.includes(Preprocessors.NORMALIZATION)) {\n    sb.appendLine(preprocessCode.normalization());\n  }\n\n  // slices data (feature selection OR pca)\n  sb.appendLine(sliceData(state));\n\n  // splits training/testing sets\n  sb.appendLine(sharedCode.split()); // TODO: exempt nlp\n\n  sb.appendLine();\n\n  // fits model\n  switch (state.model) {\n    case Models.KNN:\n      sb.appendLine(knnCode.model());\n      break;\n    case Models.NEURAL_NETWORK_FF:\n      sb.appendLine(networkCode.model(nn_state)); // TODO: replace with NN\n      break;\n    case Models.LINEAR_REGRESSION:\n      sb.appendLine(regressionCode.modelLinear());\n      break;\n    case Models.ORDINAL_REGRESSION:\n      sb.appendLine(regressionCode.modelOrdinal());\n      break;\n    case Models.POISSON_REGRESSION:\n      sb.appendLine(regressionCode.modelPoisson());\n      break;\n  }\n\n  return sb.toString();\n};\n\nconst componentsForModel = (model) => {\n  switch (model) {\n    case Models.KNN:\n      return 2;\n    case Models.NEURAL_NETWORK_FF:\n      return \"None\";\n    case Models.ORDINAL_REGRESSION:\n    case Models.POISSON_REGRESSION:\n    case Models.LINEAR_REGRESSION:\n      return 1;\n  }\n};\n\nconst params = (state) => {\n  if (state.preprocessors.includes(Preprocessors.PCA)) {\n    const components = componentsForModel(state.model);\n    return preprocessCode.paramsPca(components);\n  }\n\n  switch (state.model) {\n    case Models.KNN:\n      return knnCode.params(7); // TODO: replace with number of neighbors\n    case Models.LINEAR_REGRESSION:\n      return regressionCode.params(5); // TODO: replace with feature column\n  }\n};\n\nconst sliceData = (state) => {\n  if (state.preprocessors.includes(Preprocessors.PCA)) {\n    return preprocessCode.pca();\n  }\n\n  switch (state.model) {\n    case Models.KNN:\n      return knnCode.slice();\n    case Models.ORDINAL_REGRESSION:\n    case Models.POISSON_REGRESSION:\n    case Models.LINEAR_REGRESSION:\n      return regressionCode.slice();\n  }\n};\n\n// const normalizationWithoutPCA = (preprocessors) => {\n//     return (preprocessors.includes(Preprocessors.NORMALIZATION) &&\n//         !preprocessors.includes(Preprocessors.PCA)\n//     );\n// }\n","export const defineLoadDataset = (dataset) => {\n    return `def loadData():\n    return datasets.load_${dataset}(return_X_y=True)\n`;\n}\n\nexport const defineLoadUnspecified = () => {\n    return `## Replace with your own dataset! Return X, y sets\ndef loadData():\n    return None, None\n    `\n}\n\nexport const load = () => {\n    return  `X, y = loadData()`;\n}\n\nexport const split = () => {\n    return `# Split the data into training/testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    `;\n}","export const universal = () => {\n\nreturn `import matplotlib.pyplot as plt \nimport numpy as np \nfrom sklearn.model_selection import train_test_split`;\n\n}\n\nexport const linear = () => {\n    return `from sklearn import linear_model\nfrom sklearn.metrics import mean_squared_error, r2_score`;\n}\n\nexport const poisson = () => {\n    return `from sklearn import linear_model\nfrom sklearn.metrics import mean_poisson_deviance`;\n}\n\nexport const ordinal = () => {\n    return `import mord\nfrom sklearn.metrics import accuracy_score`;\n}\n\nexport const knn = () => {\n    return `from sklearn import neighbors`;\n}\n\nexport const nn = () => {\n    return `from tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Dense, Input`;\n}\n\nexport const sklearnDatasets = () => {\n    return `from sklearn import datasets`\n}\n\nexport const normalization = () => {\n    return `from sklearn.preprocessing import scale`\n}\n\nexport const pca = () => {\n    return `from sklearn.decomposition import PCA`\n}","export const normalization = () => {\n    return `X = scale(X)`\n}\n\nexport const pca = () => {\n    return `X = PCA(COMPONENTS).fit_transform(X)`\n}\n\nexport const paramsPca = (components) => {\n    return `COMPONENTS = ${components}`\n}","export const params = (neighbors) => {\n    return `NEIGHBORS = ${neighbors}`;\n}\n\nexport const slice = () => {\n    return `X = X[:, :2]`;\n}\n\nexport const model = () => {\n\n    const knn = \n`# we create an instance of Neighbours Classifier and fit the data.\nclf = neighbors.KNeighborsClassifier(NEIGHBORS)\nclf.fit(X, y)\n\n# Plot the decision boundary. For that, we will assign a color to each\n# point in the mesh [x_min, x_max]x[y_min, y_max].\nx_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1\ny_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1\nxx, yy = np.meshgrid(np.arange(x_min, x_max, .02),\n                        np.arange(y_min, y_max, .02))\nZ = clf.predict(np.c_[xx.ravel(), yy.ravel()])\n\n# Put the result into a color plot\ncmap = 'coolwarm'\nZ = Z.reshape(xx.shape)\nplt.figure()\nplt.contourf(xx, yy, Z, cmap=cmap, alpha=0.7)\n\n# Plot the training points\nplt.scatter(X[:, 0], X[:, 1], c=y, cmap=cmap,\n            edgecolor='k', s=20)\nplt.xlim(xx.min(), xx.max())\nplt.ylim(yy.min(), yy.max())\nplt.title(\"Classification (k = %i)\"\n            % (NEIGHBORS))\n\nplt.show()\n`;\n    return knn;\n}","export const params = (column) => {\n    return `FEATURE_COLUMN = ${column}`;\n}\n\nexport const slice = () => {\n    return `X = X[:, np.newaxis, FEATURE_COLUMN]`;\n}\n\nexport const modelLinear = () => {\n\n    const linear = \n`# Create linear regression object\nregr = linear_model.LinearRegression()\n\n# Train the model using the training sets\nregr.fit(X_train, y_train)\n\n# Make predictions using the testing set\ny_pred = regr.predict(X_test)\n\n# The coefficients\nprint('Coefficients: \\n', regr.coef_)\n# The mean squared error\nprint('Mean squared error: %.2f'\n        % mean_squared_error(y_test, y_pred))\n# The coefficient of determination: 1 is perfect prediction\nprint('Coefficient of determination: %.2f'\n        % r2_score(y_test, y_pred))\n\n# Plot outputs\nplt.scatter(X_test, y_test,  color='black')\nplt.plot(X_test, y_pred, color='blue', linewidth=3)\nplt.title('Linear Regression Model')\n\nplt.show()\n`;\n    return linear;\n}\n\nexport const modelPoisson = () => {\n    const poisson = \n`# Create linear regression object\nregr = linear_model.PoissonRegressor()\n\n# Train the model using the training sets\nregr.fit(X_train, y_train)\n\n# Make predictions using the testing set\ny_pred = regr.predict(X_test)\n\n# The coefficients\nprint('Coefficients: \\n', regr.coef_)\n# The mean poisson deviance\nprint('Mean poisson deviance: %.2f'\n        % mean_poisson_deviance(y_test, y_pred))\n\n# Plot outputs\nplt.scatter(X_test, y_test,  color='black')\nplt.plot(X_test, y_pred, color='blue', linewidth=3)\nplt.title('Poisson Regression Model')\n\nplt.show()\n`;\n    return poisson;\n}\n\nexport const modelOrdinal = () => {\n    const ordinal = \n`# Create linear regression object\nregr = mord.OrdinalRidge()\n\n# Train the model using the training sets\nregr.fit(X_train, y_train)\n\n# Make predictions using the testing set\ny_pred = regr.predict(X_test)\n\n# The coefficients\nprint('Coefficients: \\n', regr.coef_)\n# The accuracy\nprint('Accuracy: %.2f'\n        % accuracy_score(y_test, y_pred))\n\n# Plot outputs\nplt.scatter(X_test, y_test,  color='black')\nplt.plot(X_test, y_pred, color='blue', linewidth=3)\nplt.title('Ordinal Regression Model')\n\nplt.show()\n`;\n    return ordinal;\n}","import React from \"react\";\n\nimport { useState } from \"state/State\";\nimport { codeGen } from \"codegen/codeGen\";\nimport { useNNState } from \"state/NNState\";\n\nfunction CodeContainer() {\n  const { state } = useState();\n  const { nn_state } = useNNState();\n\n  return (\n    <textarea\n      value={codeGen(state, nn_state)}\n      style={{ width: \"100%\", height: \"100%\", fontSize: \"11px\" }}\n    />\n  );\n}\n\nexport default CodeContainer;\n","import React from \"react\";\nimport \"App.css\";\nimport VisualizerContainer from \"containers/VisualizerContainer\";\nimport CodeContainer from \"containers/CodeContainer\";\nimport { Grid } from \"@material-ui/core\";\n\nfunction MainColumnContainer() {\n  return (\n    <Grid container style={{ height: \"100%\" }}>\n      <Grid item className=\"visualizerContainer\">\n        <VisualizerContainer />\n      </Grid>\n      <Grid item className=\"outerContainer codeContainer\">\n        <CodeContainer />\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default MainColumnContainer;\n","import React from \"react\";\nimport { Col } from \"react-bootstrap\";\nimport RightColumnContainer from \"containers/RightColumnContainer\";\nimport MainColumnContainer from \"containers/MainColumnContainer\";\nimport SummaryContainer from \"containers/SummaryContainer\";\nimport { NNStateProvider } from \"state/NNState\";\n\nfunction ContentContainer() {\n  return (\n    <>\n      <Col className=\"summaryContainer\" lg={2}>\n        <SummaryContainer />\n      </Col>\n      {/* <Divider orientation=\"vertical\" flexItem /> */}\n      <Col className=\"mainColumnContainer\">\n        <NNStateProvider>\n          <MainColumnContainer />\n        </NNStateProvider>\n      </Col>\n      <Col className=\"rightColumnContainer\" lg={3}>\n        <NNStateProvider>\n          <RightColumnContainer />\n        </NNStateProvider>\n      </Col>\n    </>\n  );\n}\n\nexport default ContentContainer;\n","import React from \"react\";\nimport \"App.css\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport logo from \"logo.svg\";\n\nfunction HeaderContainer() {\n  return (\n    <>\n      <Navbar style={{ width: \"100%\" }} bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">\n          <img\n            alt=\"\"\n            src={logo}\n            width=\"30\"\n            height=\"30\"\n            className=\"d-inline-block align-top\"\n          />{\" \"}\n          React Bootstrap\n        </Navbar.Brand>\n      </Navbar>\n    </>\n  );\n}\n\nexport default HeaderContainer;\n","import React from \"react\";\nimport { Container, Row } from \"react-bootstrap\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-chat-widget/lib/styles.css\";\nimport \"App.css\";\n\nimport { StateProvider } from \"state/State\";\nimport ContentContainer from \"containers/ContentContainer\";\nimport HeaderContainer from \"containers/HeaderContainer\";\nimport WidgetContainer from \"containers/WidgetContainer\";\n\nfunction App() {\n  return (\n    <Container className={\"vh-100\"} fluid>\n      <StateProvider>\n        <Row className={\"headerContainer\"}>\n          <HeaderContainer />\n        </Row>\n        <Row className={\"contentContainer\"}>\n          <ContentContainer />\n        </Row>\n        <WidgetContainer />\n      </StateProvider>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport AppContainer from \"containers/AppContainer\";\nimport * as serviceWorker from \"serviceWorker\";\nimport \"fontsource-roboto\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppContainer />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}